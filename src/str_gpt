#include "str.h"
#include "table.h"
#include <string.h>
#include <stdlib.h>

void read_string(Table* table, RID rid, StringRecord* record) {
    table_read(table, rid, (ItemPtr)&record->chunk);
    record->idx = 0;
}

int has_next_char(StringRecord* record) {
    return (get_str_chunk_size(&(record->chunk)) != record->idx) ||
           (get_rid_idx(get_str_chunk_rid(&(record->chunk))) != -1);
}

char next_char(Table* table, StringRecord* record) {
    StringChunk* chunk = &record->chunk;
    if (record->idx < get_str_chunk_size(chunk) - sizeof(RID) - sizeof(short)) {
        return get_str_chunk_data_ptr(chunk)[record->idx++];
    }
    record->idx = 0;
    RID rid = get_str_chunk_rid(chunk);
    if (get_rid_block_addr(rid) == -1) {
        return '\0';
    }
    Block* block = (Block*)get_page(&table->data_pool, get_rid_block_addr(rid));
    StringChunk* next_chunk = (StringChunk*)get_item(block, get_rid_idx(rid));
    record->chunk = *next_chunk;
    release(&table->data_pool, get_rid_block_addr(rid));
    return get_str_chunk_data_ptr(&record->chunk)[record->idx++];
}

int compare_string_record(Table* table, const StringRecord* a, const StringRecord* b) {
    StringRecord rec_a = *a, rec_b = *b;
    rec_a.idx = rec_b.idx = 0;
    char char_a = get_str_chunk_data_ptr(&rec_a.chunk)[rec_a.idx++];
    char char_b = get_str_chunk_data_ptr(&rec_b.chunk)[rec_b.idx++];
    
    while (char_a == char_b) {
        if (!has_next_char(&rec_a) && !has_next_char(&rec_b)) {
            return 0;
        }
        if (!has_next_char(&rec_a)) {
            return -1;
        }
        if (!has_next_char(&rec_b)) {
            return 1;
        }
        char_a = next_char(table, &rec_a);
        char_b = next_char(table, &rec_b);
    }
    return (char_a > char_b) - (char_a < char_b);
}

RID write_string(Table* table, const char* data, off_t size) {
    short max_str_size = STR_CHUNK_MAX_LEN;
    RID rid = { .data = { -1, 0 } };
    StringChunk* chunk = (StringChunk*)malloc(sizeof(StringChunk));

    size_t bytes_remaining = size;
    while (bytes_remaining > 0) {
        size_t chunk_size = bytes_remaining > max_str_size ? max_str_size : bytes_remaining;
        get_str_chunk_size(chunk) = chunk_size;
        memcpy(get_str_chunk_data_ptr(chunk), data, chunk_size);
        data += chunk_size;
        bytes_remaining -= chunk_size;

        RID new_rid = table_insert(table, (ItemPtr)chunk, get_str_chunk_size(chunk) + sizeof(RID) + sizeof(short));
        get_rid_block_addr(get_str_chunk_rid(chunk)) = get_rid_block_addr(rid);
        get_rid_idx(get_str_chunk_rid(chunk)) = get_rid_idx(rid);
        rid = new_rid;
    }
    free(chunk);
    return rid;
}

void delete_string(Table* table, RID rid) {
    while (get_rid_block_addr(rid) != -1) {
        off_t addr = get_rid_block_addr(rid);
        short idx = get_rid_idx(rid);
        Block* block = (Block*)get_page(&table->data_pool, addr);
        StringChunk* chunk = (StringChunk*)get_item(block, idx);
        RID next_rid = get_str_chunk_rid(chunk);
        release(&table->data_pool, addr);
        table_delete(table, rid);
        rid = next_rid;
    }
}

void print_string(Table* table, const StringRecord* record) {
    StringRecord rec = *record;
    printf("\"");
    while (has_next_char(&rec)) {
        printf("%c", next_char(table, &rec));
    }
    printf("\"");
}

size_t load_string(Table* table, const StringRecord* record, char* dest, size_t max_size) {
    StringRecord rec = *record;
    size_t size = 0;
    while (size < max_size && has_next_char(&rec)) {
        dest[size++] = next_char(table, &rec);
    }
    dest[size] = '\0';
    return size;
}
